{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","state","init","offset","length","avgRowHeight","prevProps","prevState","this","setState","inView","listRef","scrollHeight","items","querySelectorAll","diff","height","i","clientHeight","newAvgHeight","renderedData","data","slice","map","d","index","rI","className","key","style","background","el","scrollTop","newScroll","Math","floor","currScroll","newOffset","rowHeight","topPadding","max","bottomPadding","ref","onScroll","onScrollHandler","bind","renderListItems","React","Array","from","_","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a2136bf.chunk.js","sourcesContent":["import * as React from 'react';\nimport './list.css';\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      init: false,\n      offset: 0,\n      length: 30,\n      avgRowHeight: 40,\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.init !== this.state.init) {\n      this.setState({ inView: this.listRef.scrollHeight / this.state.avgRowHeight });\n    }\n\n    if (prevState.offset > this.state.offset && this.state.offset > 0) {\n      const el = this.listRef;\n      const items = el.querySelectorAll(\".List-item\");\n      const diff = prevState.offset - this.state.offset;\n      let height = 0;\n\n      for (let i = 0; i < diff && i < items.length; i++) {\n        height += items[i].clientHeight;\n      }\n      const newAvgHeight = ((this.state.avgRowHeight * prevState.offset) - (height)) / this.state.offset;\n      this.setState({\n        avgRowHeight: newAvgHeight,\n      });\n    }\n  }\n\n  renderListItems(offset, length) {\n    const {\n      data,\n    } = this.props;\n\n    const renderedData = data.slice(offset, offset + length);\n\n    return (\n      <>\n        {renderedData.map((d, index) => {\n          const rI = offset + index;\n          return (\n            <div\n              className=\"List-item\"\n              key={rI}\n              style={{\n                height: rI % 2 === 1 ? `${40}px` : `${40 + (rI % 5) * 20}px`,\n                background: rI % 2 === 1 ? 'white' : '#d5d5d5'\n              }}\n            >\n              <p>{d}</p>\n            </div>\n          )\n        })}\n      </>\n    )\n  }\n\n  onScrollHandler() {\n    if (this.listRef) {\n      const {\n        data,\n      } = this.props;\n\n      const {\n        offset,\n        avgRowHeight\n      } = this.state;\n\n      const el = this.listRef;\n      const { scrollTop } = el;\n      const items = el.querySelectorAll(\".List-item\");\n\n      const newScroll = Math.floor(scrollTop - (offset * avgRowHeight));\n      let inView = 0;\n      let currScroll = 0;\n      let i = 0;\n      while (i < items.length && currScroll + items[i].clientHeight <= el.clientHeight) {\n        const rowHeight = items[i].clientHeight;\n        currScroll += rowHeight;\n        inView++;\n        i++;\n      }\n\n      if (newScroll > 0) {\n        let currScroll = newScroll;\n        let newOffset = offset;\n        let newAvgHeight = avgRowHeight;\n        let i = 0;\n        while (i < items.length && currScroll >= items[i].clientHeight) {\n          const rowHeight = items[i].clientHeight;\n          currScroll -= rowHeight;\n          newAvgHeight = ((newOffset * newAvgHeight) + (rowHeight)) / (newOffset + 1);\n          newOffset++;\n          i++;\n        }\n\n        newOffset = newOffset < data.length - inView ? newOffset : data.length - inView - 1;\n        if (newOffset > offset) {\n          this.setState({\n            inView,\n            offset: newOffset,\n            avgRowHeight: newAvgHeight,\n          })\n        }\n      } else {\n        if (avgRowHeight) {\n          const diff = Math.floor(newScroll / avgRowHeight) || -1;\n          const newOffset = offset + diff;\n          if (newOffset < offset) {\n            this.setState({\n              inView,\n              offset: newOffset < 0 ? 0 : newOffset,\n            })\n          }\n        }\n      }\n    }\n\n  }\n\n  render() {\n    const {\n      data,\n    } = this.props;\n\n    const {\n      offset,\n      inView,\n      length,\n      avgRowHeight\n    } = this.state;\n\n    const buffer = 5;\n\n    const topPadding = Math.max(0, (offset - buffer) * avgRowHeight);\n    const bottomPadding = Math.max(0, (data.length - inView - (offset + buffer) - 1) * avgRowHeight);\n\n    return (\n      <div\n        ref={(el) => {\n          this.listRef = el;\n          if (el && !this.state.init) this.setState({ init: true });\n        }}\n        className=\"List\"\n        onScroll={this.onScrollHandler.bind(this)}\n      >\n        <div\n          className=\"List-topPadding\"\n          style={{\n            height: topPadding\n          }}\n        />\n        {this.renderListItems(Math.max(0, offset - buffer), length)}\n        <div\n          className=\"List-bottomPadding\"\n          style={{\n            height: bottomPadding\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default List;","import React from 'react';\nimport List from './List';\nconst data = Array.from({ length: 100 }, (_, index) => `List Item:- ${index}`);\n\nfunction App() {\n  return (\n    <List\n      data={data}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}