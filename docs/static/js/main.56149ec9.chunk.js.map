{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","listRef","React","state","offset","length","avgRowHeight","prevProps","prevState","this","items","current","querySelectorAll","diff","height","i","clientHeight","newAvgHeight","setState","renderedData","data","slice","map","d","index","rI","className","key","style","background","el","scrollTop","newScroll","Math","floor","inView","currScroll","newOffset","rowHeight","ref","onScroll","onScrollHandler","bind","renderListItems","Array","from","_","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56149ec9.chunk.js","sourcesContent":["import * as React from 'react';\nimport './list.css';\n\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.listRef = React.createRef();\n        this.state = {\n            offset: 0,\n            length: 30,\n            avgRowHeight: 40,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.offset > this.state.offset && this.state.offset > 0) {\n            const el = this.listRef.current;\n            const items = el.querySelectorAll(\".List-item\");\n            const diff = prevState.offset - this.state.offset;\n            let height = 0;\n\n            for (let i = 0; i < diff && i < items.length; i++) {\n                height += items[i].clientHeight;\n            }\n            const newAvgHeight = ((this.state.avgRowHeight * prevState.offset) - (height)) / this.state.offset;\n            this.setState({\n                avgRowHeight: newAvgHeight,\n            });\n        }\n    }\n\n    renderListItems(offset, length) {\n        const {\n            data,\n        } = this.props;\n\n        const renderedData = data.slice(offset, offset + length);\n\n        return (\n            <>\n                {renderedData.map((d, index) => {\n                    const rI = offset + index;\n                    return (\n                        <div\n                            className=\"List-item\"\n                            key={rI}\n                            style={{\n                                height: rI % 2 === 1 ? `${40}px` : `${40 + (rI % 5) * 20}px`,\n                                background: rI % 2 === 1 ? 'white' : '#d5d5d5'\n                            }}\n                        >\n                            <p>{d}</p>\n                        </div>\n                    )\n                })}\n            </>\n        )\n    }\n\n    onScrollHandler() {\n        if (this.listRef.current) {\n            const {\n                data,\n            } = this.props;\n\n            const {\n                offset,\n                avgRowHeight\n            } = this.state;\n\n            const el = this.listRef.current;\n            const { scrollTop } = el;\n            const items = el.querySelectorAll(\".List-item\");\n\n            const newScroll = Math.floor(scrollTop - (offset * avgRowHeight));\n            let inView = 0;\n            let currScroll = 0;\n            let i = 0;\n            while (i < items.length && currScroll + items[i].clientHeight <= el.clientHeight) {\n                const rowHeight = items[i].clientHeight;\n                currScroll += rowHeight;\n                inView++;\n                i++;\n            }\n            this.setState({\n                inView\n            })\n\n            if (newScroll > 0) {\n                let currScroll = newScroll;\n                let newOffset = offset;\n                let newAvgHeight = avgRowHeight;\n                let i = 0;\n                while (i < items.length && currScroll >= items[i].clientHeight) {\n                    const rowHeight = items[i].clientHeight;\n                    currScroll -= rowHeight;\n                    newAvgHeight = ((newOffset * newAvgHeight) + (rowHeight)) / (newOffset + 1);\n                    newOffset++;\n                    i++;\n                }\n\n                newOffset = newOffset < data.length - inView ? newOffset : data.length - inView - 1;\n                if (newOffset > offset) {\n                    this.setState({\n                        offset: newOffset,\n                        avgRowHeight: newAvgHeight,\n                    })\n                }\n            } else {\n                if (avgRowHeight) {\n                    const diff = Math.floor(newScroll / avgRowHeight) || -1;\n                    const newOffset = offset + diff;\n                    if (newOffset < offset) {\n                        this.setState({\n                            offset: newOffset < 0 ? 0 : newOffset,\n                        })\n                    }\n                }\n            }\n        }\n\n    }\n\n    render() {\n        const {\n            data,\n        } = this.props;\n\n        const {\n            offset,\n            inView,\n            length,\n            avgRowHeight\n        } = this.state;\n\n        return (\n            <div ref={this.listRef} className=\"List\" onScroll={this.onScrollHandler.bind(this)}>\n                <div\n                    className=\"List-topPadding\"\n                    style={{\n                        height: `${offset * avgRowHeight}px`\n                    }}\n                />\n                {this.renderListItems(offset, length)}\n                <div\n                    className=\"List-bottomPadding\"\n                    style={{\n                        height: `${(data.length - inView - offset - 1) * avgRowHeight}px`\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default List;","import React from 'react';\nimport List from './List';\nconst data = Array.from({ length: 100 }, (_, index) => `List Item:- ${index}`);\n\nfunction App() {\n  return (\n    <List\n      data={data}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}